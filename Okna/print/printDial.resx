<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAr6+vA62trTx/f39/XFxcsUxM
        TNFNTU3hTU1N4UxMTNFcXFyxf39/f62trTyvr68DAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAr6+vEISEhHxGRkbiGBgY/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/GBgY/0ZGRuKEhIR8r6+vEAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAr6+vAY6OjmRAQEDrBAQE/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wQEBP8/Pz/rjo6OZK+v
        rwEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAK+vrw5ra2uvERER/wAA
        AP8AAAD/AAAA/wAAAP8oKCj/ZmZm/5CQkP+cm5r/nJua/5CQkP9mZmb/KCgo/wAAAP8AAAD/AAAA/wAA
        AP8RERH/a2trr6+vrw4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACvr68VW1tbzgQE
        BP8AAAD/AAAA/wMDA/9eXl7/yL6v/925gv/MlUL/wX0W/712Cv+9dgr/wX0W/8yVQv/duYL/yL6v/2Fh
        Yf8DAwP/AAAA/wAAAP8DAwP/W1tbzq+vrxUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAr6+vDFxc
        XMsBAQH/AAAA/wAAAP8wMDD/yL+x/9GgVP+8cgT/u3EB/7txAf+7cQH/u3EB/7txAf+7cQH/u3EB/7tx
        Af+8cgT/0aBU/8i/sf8wMDD/AAAA/wAAAP8BAQH/XFxczK+vrwwAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
        cP+ggVP/KSEV/zIoGv+Oc0v/Sjwn/yUeE/8pIRX/KSEV/2NRNP/HoWf/QTQh/4xySf8tJBf/k3dM/zMp
        Gv+tjFn/2a9w/9mvcP/Zr3D/z5pK/3heM/9YWFj/W1tb/6urq/+0tLRfr6+vHtTU1P7BwcH/bGxt/1dU
        Tv/Mn1n/3bmB/4pzUf8zKh7/tZdq/924gf/YtH7/Sj4s/yojGP8qIxj/j3dT/924gf+ZgFr/PDIi/493
        VP8uJxv/ln1Y/zMrHv+ylGf/3biB/924gf/Hk0X/V1RO/2lpaf+6urr/1NTU/q+vrx4AAAAAy8vLxuPj
        4//U1NT/fX5+/5Z+Vv/iwpH/sZhy/7edd//iwpH/4sKR/+LCkf95aE7/KyUb/yslG/+rk27/4sKR/+LC
        kf+bhmX/PjUn/5F9Xv8vKR7/mYNj/zkwJP/NsIT/4sKR/5FxP/94eXn/0NDQ/+Pj4//Ly8vGAAAAAAAA
        AAC2trZe4uLi/+bm5v/k5OT/enhz/9i+l//my6L/5sui/+bLov/my6L/nIlt/ywnH/8rJh7/RT0x/+HH
        nv/my6L/5sui/+bLov+di3D/QDgs/5SCaP8zLST/Rz4x/6eUdv/SsoP/eHVt/+Pj4//m5ub/4uLi/7a2
        tl4AAAAAAAAAAK+vrwXPz8/a6Ojo/+jo6P/T1NT/h4J2/+rTsf/q1LL/6tSy/5uMdf8sKCL/KSUf/0A6
        Mf/Jtpn/6tSy/+rUsv/q1LL/6tSy/+rUsv+fkHn/Pzkv/0Q+M/80Lyf/076e/3pyY//U1NT/6Ojo/+jo
        6P/Pz8/ar6+vBQAAAAAAAAAAAAAAALa2tkrh4eH+6+vr/+vr6/+/wMD/oZqL/+7cwf/u3MH/sKOQ/5CG
        dv+toI3/6de9/+7cwf/u3MH/7tzB/+7cwf/u3MH/7tzB/+7cwf/CtJ7/kYZ3/8+/qP+JhHr/v8DA/+vr
        6//r6+v/4eHh/ra2tkoAAAAAAAAAAAAAAAAAAAAAAAAAAMPDw5jq6ur/7e3t/+3t7f/AwcH/oJuR//Di
        zf/y5M//8uTP//Lkz//y5M//8uTP//Lkz//y5M//8uTP//Lkz//y5M//8uTP//Lkz//q3cn/i4iB/8DB
        wf/t7e3/7e3t/+rq6v/Dw8OYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAr6+vB8rKyr/u7u7/7+/v/+/v
        7//Y2Nj/kpKP/83Guv/27Nz/9uzc//bs3P/27Nz/9uzc//bs3P/269z/9uvc//bs3P/169z/vrit/4aH
        hf/Y2Nj/7+/v/+/v7//u7u7/ysrKwK+vrwcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAr6+vDsvL
        y8Hv7+//8fHx//Hx8f/x8fH/v8DA/5WWlP+opqD/0s3F/+3n3v/07eP/9O3j/+rk2v/MyMD/oJ6Z/4uM
        i/+8vr7/8fHx//Hx8f/x8fH/7+/v/8vLy8Gvr68OAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAr6+vCMbGxp3p6ur/8/Pz//Pz8//z8/P/8/Pz/+Pj5P+7vLz/n6Ch/5eZmv+XmZr/nqCh/7u8
        vP/j4+T/8/Pz//Pz8//z8/P/8/Pz/+rq6v/Gxsadr6+vCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAALi5uFHY2Njg8vLy//X19f/19fX/9fX1//X19f/19fX/9fX1//X1
        9f/19fX/9fX1//X19f/19fX/9fX1//Ly8v/Y2Njgubm5UgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAK+vrwm8vLxp19fX0ujo6P/29vb/9/f3//f3
        9//39/f/9/f3//f39//39/f/9vb2/+jo6P/X19fSvLy8aa+vrwkAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACvr68Br6+vKry8
        vG3Nzc2e1dXVvtXV1c/V1dXO1dXVvs3NzZ68vLxtr6+vKq+vrwEAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/8AD//8AAP/8AAA/+AAAH/AAAA/gAAAH4AAAB8AAAAOAAAABgAAAAYAA
        AAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAYAAAAGAAAABwAAAA+AA
        AAfgAAAH8AAAD/gAAB/+AAB//wAA///AA/8=
</value>
  </data>
</root>